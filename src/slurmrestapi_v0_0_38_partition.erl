-module(slurmrestapi_v0_0_38_partition).

-export([encode/1]).

-export_type([slurmrestapi_v0_0_38_partition/0]).

-type slurmrestapi_v0_0_38_partition() ::
    #{ 'flags' => list(),
       'preemption_mode' => list(),
       'allowed_allocation_nodes' => binary(),
       'allowed_accounts' => binary(),
       'allowed_groups' => binary(),
       'allowed_qos' => binary(),
       'alternative' => binary(),
       'billing_weights' => binary(),
       'default_memory_per_cpu' => integer(),
       'default_time_limit' => integer(),
       'denied_accounts' => binary(),
       'denied_qos' => binary(),
       'preemption_grace_time' => integer(),
       'maximum_cpus_per_node' => integer(),
       'maximum_memory_per_node' => integer(),
       'maximum_nodes_per_job' => integer(),
       'max_time_limit' => integer(),
       'min_nodes_per_job' => integer(),
       'name' => binary(),
       'nodes' => binary(),
       'over_time_limit' => integer(),
       'priority_job_factor' => integer(),
       'priority_tier' => integer(),
       'qos' => binary(),
       'state' => binary(),
       'total_cpus' => integer(),
       'total_nodes' => integer(),
       'tres' => binary(),
       'maximum_memory_per_cpu' => integer(),
       'default_memory_per_node' => integer()
     }.

encode(#{ 'flags' := Flags,
          'preemption_mode' := PreemptionMode,
          'allowed_allocation_nodes' := AllowedAllocationNodes,
          'allowed_accounts' := AllowedAccounts,
          'allowed_groups' := AllowedGroups,
          'allowed_qos' := AllowedQos,
          'alternative' := Alternative,
          'billing_weights' := BillingWeights,
          'default_memory_per_cpu' := DefaultMemoryPerCpu,
          'default_time_limit' := DefaultTimeLimit,
          'denied_accounts' := DeniedAccounts,
          'denied_qos' := DeniedQos,
          'preemption_grace_time' := PreemptionGraceTime,
          'maximum_cpus_per_node' := MaximumCpusPerNode,
          'maximum_memory_per_node' := MaximumMemoryPerNode,
          'maximum_nodes_per_job' := MaximumNodesPerJob,
          'max_time_limit' := MaxTimeLimit,
          'min_nodes_per_job' := MinNodesPerJob,
          'name' := Name,
          'nodes' := Nodes,
          'over_time_limit' := OverTimeLimit,
          'priority_job_factor' := PriorityJobFactor,
          'priority_tier' := PriorityTier,
          'qos' := Qos,
          'state' := State,
          'total_cpus' := TotalCpus,
          'total_nodes' := TotalNodes,
          'tres' := Tres,
          'maximum_memory_per_cpu' := MaximumMemoryPerCpu,
          'default_memory_per_node' := DefaultMemoryPerNode
        }) ->
    #{ 'flags' => Flags,
       'preemption_mode' => PreemptionMode,
       'allowed_allocation_nodes' => AllowedAllocationNodes,
       'allowed_accounts' => AllowedAccounts,
       'allowed_groups' => AllowedGroups,
       'allowed_qos' => AllowedQos,
       'alternative' => Alternative,
       'billing_weights' => BillingWeights,
       'default_memory_per_cpu' => DefaultMemoryPerCpu,
       'default_time_limit' => DefaultTimeLimit,
       'denied_accounts' => DeniedAccounts,
       'denied_qos' => DeniedQos,
       'preemption_grace_time' => PreemptionGraceTime,
       'maximum_cpus_per_node' => MaximumCpusPerNode,
       'maximum_memory_per_node' => MaximumMemoryPerNode,
       'maximum_nodes_per_job' => MaximumNodesPerJob,
       'max_time_limit' => MaxTimeLimit,
       'min_nodes_per_job' => MinNodesPerJob,
       'name' => Name,
       'nodes' => Nodes,
       'over_time_limit' => OverTimeLimit,
       'priority_job_factor' => PriorityJobFactor,
       'priority_tier' => PriorityTier,
       'qos' => Qos,
       'state' => State,
       'total_cpus' => TotalCpus,
       'total_nodes' => TotalNodes,
       'tres' => Tres,
       'maximum_memory_per_cpu' => MaximumMemoryPerCpu,
       'default_memory_per_node' => DefaultMemoryPerNode
     }.
